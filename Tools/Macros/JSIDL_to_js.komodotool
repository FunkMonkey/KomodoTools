{
  "keyboard_shortcut": "Ctrl+2", 
  "name": "JSIDL to js", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "// http://plugins.jquery.com/project/tempest", 
    "// for functions: ^(\\s*)([_\\w\\d]*)[\\s]*([_\\w\\d]*)\\(([_\\w\\d \\t,]*)\\)[;\\s]*$", 
    "", 
    "function parseIndent(line)", 
    "{", 
    "    var regEx = /^(\\s*)/", 
    "    return line.match(regEx)[1];", 
    "}", 
    "", 
    "function parseFunction(line)", 
    "{", 
    "    var regEx = /^\\s*([_\\w\\d]*)[\\s]+([_\\w\\d]*)\\(([_\\w\\d \\t,]*)\\)[;\\s]*$/", 
    "    var match = line.match(regEx);", 
    "    ", 
    "    var result = {", 
    "        returnType: match[1],", 
    "        name: match[2],", 
    "        params: []", 
    "    };", 
    "    ", 
    "    if(match[3] != \"\")", 
    "    {", 
    "        var params = match[3].split(\",\");", 
    "        params.maxTypeLength = 0;", 
    "        params.maxNameLength = 0;", 
    "        for(var i = 0; i < params.length; ++i)", 
    "        {", 
    "            var split = params[i].trim().split(\" \");", 
    "            params[i] = {", 
    "                type: split[0],", 
    "                name: split[1]", 
    "            };", 
    "            ", 
    "            if(split[0].length > params.maxTypeLength)", 
    "                params.maxTypeLength = split[0].length;", 
    "                ", 
    "            if(split[1].length > params.maxNameLength)", 
    "                params.maxNameLength = split[1].length;", 
    "        }", 
    "        ", 
    "        result.params = params;", 
    "    }", 
    "    ", 
    "    return result;", 
    "}", 
    "", 
    "/**", 
    "* Summary", 
    "* ", 
    "* @param   {Type} dt Description", 
    "* ", 
    "* @returns {Type} Description", 
    "*/", 
    "var lineEnd = \"\\n\";", 
    "", 
    "function getFunctionCode(func, isObjFunc, addTabStops)", 
    "{   ", 
    "    var code = \"\";", 
    "    code += \"/**\" + lineEnd;", 
    "    code += \" * \";", 
    "    ", 
    "    if(addTabStops)", 
    "        code +=\"[[%tabstop:Summary]]\";", 
    "    ", 
    "    code += lineEnd;", 
    "    ", 
    "    if(func.params.length > 0)", 
    "    {", 
    "        code += \" * \" + lineEnd;", 
    "        for(var i = 0; i < func.params.length; ++i)", 
    "        {", 
    "            var paramCode = \"@param   {\" + func.params[i].type + \"}\";", 
    "            for(var j = 0; j < func.params.maxTypeLength - func.params[i].type.length + 3; ++j)", 
    "                paramCode += \" \";", 
    "                ", 
    "            paramCode += func.params[i].name;", 
    "            for(var j = 0; j < func.params.maxNameLength - func.params[i].name.length + 3; ++j)", 
    "                paramCode += \" \";", 
    "            ", 
    "            if(addTabStops)", 
    "                paramCode += \"[[%tabstop:Description]]\"", 
    "        ", 
    "            code += \" * \" + paramCode + lineEnd;", 
    "        }", 
    "    }", 
    "    ", 
    "    if(func.returnType !== \"void\")", 
    "    {", 
    "        code += \" * \" + lineEnd;", 
    "        code += \" * @returns {\" + func.returnType + \"}   \";", 
    "        ", 
    "        if(addTabStops)", 
    "            code += \"[[%tabstop:Description]]\"", 
    "        ", 
    "        code += lineEnd;", 
    "    }", 
    "    ", 
    "    code += \" */\" + lineEnd;", 
    "    ", 
    "    var head = \"\";", 
    "    if(addTabStops)", 
    "        if(isObjFunc)", 
    "            head += \"[[%tabstop:\" + func.name + \": ]]\"", 
    "    else", 
    "        head += ((isObjFunc === true) ? func.name + \": \" : \"\");", 
    "    head += \"function \" + func.name + \"(\";", 
    "    ", 
    "    for(var i = 0; i < func.params.length; ++i)", 
    "        head += func.params[i].name + ((i === func.params.length - 1) ? \"\" : \", \");", 
    "    ", 
    "    head += \")\";", 
    "    ", 
    "    code += head + lineEnd;", 
    "    code += \"{\" + lineEnd;", 
    "    code += \"\\t\"; // todo: tab?", 
    "    ", 
    "    if(addTabStops)", 
    "        code += \"[[%tabstop:]]\"", 
    "        ", 
    "    code += lineEnd;", 
    "    ", 
    "    code += \"}\" + ((isObjFunc === true) ? \", \" : \"\") + lineEnd;", 
    "    ", 
    "    return code;", 
    "}", 
    "", 
    "var scimoz = ko.views.manager.currentView.scimoz;", 
    "", 
    "var currLine = scimoz.lineFromPosition(scimoz.currentPos);", 
    "var lineStart = scimoz.positionFromLine(currLine);", 
    "var lineEndPos = scimoz.getLineEndPosition(currLine);", 
    "var text = scimoz.getTextRange(lineStart, lineEndPos);", 
    "", 
    "var indent = parseIndent(text);", 
    "", 
    "var code = getFunctionCode(parseFunction(text), true, true);", 
    "", 
    "var fakeSnippet = {", 
    "    hasAttribute: function(name) {", 
    "        return name in this;", 
    "    },", 
    "    getStringAttribute: function(name) {", 
    "        return this[name];", 
    "    },", 
    "    name: 'autodoc snippet',", 
    "    indent_relative: 'true',", 
    "    value: code", 
    "};", 
    "//log.debug('snipText: ' + snipText);", 
    "", 
    "scimoz.targetStart = lineStart;", 
    "scimoz.targetEnd = lineEndPos;", 
    "scimoz.replaceTarget(indent.length, indent);", 
    "scimoz.currentPos = scimoz.anchor = lineStart + indent.length;", 
    "//scimoz.anchor = lineStart;", 
    "", 
    "ko.projects.snippetInsert(fakeSnippet);"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": false, 
  "type": "macro"
}